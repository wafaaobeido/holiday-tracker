services:

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      DB_VENDOR: H2  # Using H2 for simplicity/free-tier; in production use an external DB.
    command: start-dev
    ports:
      - "8080:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
    networks:
      - backend-network

  # ----- Kong API Gateway -----
  kong-database:
    image: postgres:latest
    container_name: kong-database
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - kong-net
      - backend-network

  kong:
    image: kong:latest
    container_name: kong
    ports:
      - "8000:8000"   # proxy
      - "8001:8001"   # admin API
    environment:
      KONG_DATABASE: "postgres"
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      KONG_DECLARATIVE_CONFIG: "/usr/local/kong/kong.yml"
      KONG_LOG_LEVEL: "info"
    volumes:
      - ../api-gateway/config/kong.yml:/usr/local/kong/kong.yml:ro
    depends_on:
      - kong-database
      - auth-service
      - holiday-service
      - user-service
    networks:
      - kong-net
      - backend-network

  # ----- MySQL Databases for Each Microservice -----

  holiday-db:
    image: my-java19-maven:latest
    container_name: holiday-db
    environment:
      MYSQL_ROOT_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      MYSQL_DATABASE: holiday_db
    ports:
      - "3304:3306"
    volumes:
      - ../mysql/holiday-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend-network

  user-db:
    image: my-java19-maven:latest
    container_name: user-db
    environment:
      MYSQL_ROOT_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      MYSQL_DATABASE: user_db
    ports:
      - "3303:3306"
    volumes:
      - ../mysql/user-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend-network

  # ----- Redis for Caching -----
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend-network

  # ----- Kafka & Zookeeper for Messaging -----
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
    ports:
      - "2181:2181"
    networks:
      - backend-network

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_BROKERCONNECT: "kafka:29092"
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - backend-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8090:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - backend-network

  # ----- Microservices -----
  auth-service:
    build: 
      context: ../../backend  
      dockerfile: auth-service/Dockerfile
    # image: auth-service
    container_name: auth-service
    ports:
      - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      # Point to Keycloak using its service name
      KEYCLOAK_URL: http://keycloak:8080
    depends_on:
      - keycloak
    networks:
      - backend-network

  holiday-service:
    build:
      context: ../../backend  # Now Docker has access to backend and shared-libraries
      dockerfile: holiday-service/Dockerfile
    # image: holiday-service
    container_name: holiday-service
    ports:
      - "8082:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://holiday-db:3306/holiday_db
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - holiday-db
      - redis
      - kafka
    networks:
      - backend-network

  user-service:
    build:
      context: ../../backend  
      dockerfile: user-service/Dockerfile
    # image: user-service
    container_name: user-service
    ports:
      - "8083:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://user-db:3306/user_db
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    depends_on:
      - user-db
    networks:
      - backend-network

  # ----- Frontend (Angular) -----
  frontend:
    build: ../../frontend
    container_name: frontend
    volumes:
    - ../../frontend:/usr/src/app
    ports:
      - "4200:80"  
    networks:
      - backend-network


networks:
  kong-net:
    name: kong-net
    driver: bridge
  backend-network:
    name: backend-network
    driver: bridge


volumes:
  keycloak_data: